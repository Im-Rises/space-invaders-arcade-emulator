use std::cell::RefCell;
use std::rc::Rc;

// use std::mem;
use crate::si_arcade::cpu::opcodes::*;
// use crate::binary_lib;
use crate::si_arcade::cpu::register::{Flag, Register};

use super::mmu::Mmu;

mod opcodes;
mod register;

const CLOCK_FREQUENCY: usize = 2_000_000;

pub struct Cpu {
    regs: Register,
    sp: u16,
    pc: u16,
    stat: u16,
    inte: bool,
    halted: bool,
    cycles: u8,
    mmu: Rc<RefCell<Mmu>>,
}

impl Cpu {
    pub fn new(mmu: &Rc<RefCell<Mmu>>) -> Cpu {
        Cpu {
            regs: Register::new(),
            sp: 0,
            pc: 0x100,
            stat: 0,
            inte: false,
            halted: false,
            cycles: 0,
            mmu: Rc::clone(&mmu),
        }
    }

    fn clock(&mut self) {
        if self.cycles == 0 {
            let opcode = self.fetch_byte();
            self.cycles = self.compute_opcode(opcode);
        }
        self.cycles -= 1;
    }

    fn fetch_byte(&mut self) -> u8 {
        let data = self.read(self.pc);
        self.pc += 1;
        data
    }

    fn fetch_word(&mut self) -> u16 {
        (self.fetch_byte() | self.fetch_byte() << 8) as u16
    }

    fn read(&self, address: u16) -> u8 {
        self.mmu.borrow().read(address)
    }

    fn write(&self, address: u16, data: u8) {
        self.mmu.borrow_mut().write(address, data);
    }

    fn compute_opcode(&mut self, opcode: u8) -> u8 {
        match opcode {
            0x00 => nop(),
            0x01 => lxi_b(self),
            0x02 => stax_pr(self, self.regs.get_bc()),
            0x03 => inx_b(self),
            0x04 => inr_b(self),
            0x05 => dcr_b(self),
            0x06 => mvi_b(self),
            0x07 => rlc(self),
            0x08 => nop(),
            0x09 => dad_word(self, self.regs.get_bc()),
            0x0A => ldax_pr(self, self.regs.get_bc()),
            0x0B => dcx_b(self),
            0x0C => inr_c(self),
            0x0D => dcr_c(self),
            0x0E => mvi_c(self),
            0x0F => rrc(self),
            0x10 => nop(),
            0x11 => lxi_d(self),
            0x12 => stax_pr(self, self.regs.get_de()),
            0x13 => inx_d(self),
            0x14 => inr_d(self),
            0x15 => dcr_d(self),
            0x16 => mvi_d(self),
            0x17 => ral(self),
            0x18 => nop(),
            0x19 => dad_word(self, self.regs.get_de()),
            0x1A => ldax_pr(self, self.regs.get_de()),
            0x1B => dcx_d(self),
            0x1C => inr_e(self),
            0x1D => dcr_e(self),
            0x1E => mvi_e(self),
            0x1F => rar(self),
            0x20 => nop(),
            0x21 => lxi_h(self),
            0x22 => shld(self),
            0x23 => inx_h(self),
            0x24 => inr_h(self),
            0x25 => dcr_h(self),
            0x26 => mvi_h(self),
            0x27 => daa(self),
            0x28 => nop(),
            0x29 => dad_word(self, self.regs.get_hl()),
            0x2A => lhld(self),
            0x2B => dcx_h(self),
            0x2C => inr_l(self),
            0x2D => dcr_l(self),
            0x2E => mvi_l(self),
            0x2F => cma(self),
            0x30 => nop(),
            0x31 => lxi_sp(self),
            0x32 => sta(self),
            0x33 => inx_sp(self),
            0x34 => inr_m(self),
            0x35 => dcr_m(self),
            0x36 => mvi_m(self),
            0x37 => stc(self),
            0x38 => nop(),
            0x39 => dad_word(self, self.sp),
            0x3A => lda(self),
            0x3B => dcx_sp(self),
            0x3C => inr_a(self),
            0x3D => dcr_a(self),
            0x3E => mvi_a(self),
            0x3F => cmc(self),
            0x40 => mov_b_r(self, self.regs.b),
            0x41 => mov_b_r(self, self.regs.c),
            0x42 => mov_b_r(self, self.regs.d),
            0x43 => mov_b_r(self, self.regs.e),
            0x44 => mov_b_r(self, self.regs.h),
            0x45 => mov_b_r(self, self.regs.l),
            0x46 => mov_b_m(self),
            0x47 => mov_b_r(self, self.regs.a),
            0x48 => mov_c_r(self, self.regs.b),
            0x49 => mov_c_r(self, self.regs.c),
            0x4A => mov_c_r(self, self.regs.d),
            0x4B => mov_c_r(self, self.regs.e),
            0x4C => mov_c_r(self, self.regs.h),
            0x4D => mov_c_r(self, self.regs.l),
            0x4E => mov_c_r(self, self.regs.a),
            0x4F => mov_c_m(self),
            0x50 => mov_d_r(self, self.regs.b),
            0x51 => mov_d_r(self, self.regs.c),
            0x52 => mov_d_r(self, self.regs.d),
            0x53 => mov_d_r(self, self.regs.e),
            0x54 => mov_d_r(self, self.regs.h),
            0x55 => mov_d_r(self, self.regs.l),
            0x56 => mov_d_m(self),
            0x57 => mov_d_r(self, self.regs.a),
            0x58 => mov_e_r(self, self.regs.b),
            0x59 => mov_e_r(self, self.regs.c),
            0x5A => mov_e_r(self, self.regs.d),
            0x5B => mov_e_r(self, self.regs.e),
            0x5C => mov_e_r(self, self.regs.h),
            0x5D => mov_e_r(self, self.regs.l),
            0x5E => mov_e_m(self),
            0x5F => mov_e_r(self, self.regs.a),
            0x60 => mov_h_r(self, self.regs.b),
            0x61 => mov_h_r(self, self.regs.c),
            0x62 => mov_h_r(self, self.regs.d),
            0x63 => mov_h_r(self, self.regs.e),
            0x64 => mov_h_r(self, self.regs.h),
            0x65 => mov_h_r(self, self.regs.l),
            0x66 => mov_h_m(self),
            0x67 => mov_h_r(self, self.regs.a),
            0x68 => mov_l_r(self, self.regs.b),
            0x69 => mov_l_r(self, self.regs.c),
            0x6A => mov_l_r(self, self.regs.d),
            0x6B => mov_l_r(self, self.regs.e),
            0x6C => mov_l_r(self, self.regs.h),
            0x6D => mov_l_r(self, self.regs.l),
            0x6E => mov_l_m(self),
            0x6F => mov_l_r(self, self.regs.a),
            0x70 => mov_m_r(self, self.regs.b),
            0x71 => mov_m_r(self, self.regs.c),
            0x72 => mov_m_r(self, self.regs.d),
            0x73 => mov_m_r(self, self.regs.e),
            0x74 => mov_m_r(self, self.regs.h),
            0x75 => mov_m_r(self, self.regs.l),
            0x76 => hlt(self),
            0x77 => mov_a_r(self, self.regs.b),
            0x78 => mov_a_r(self, self.regs.c),
            0x79 => mov_a_r(self, self.regs.d),
            0x7A => mov_a_r(self, self.regs.e),
            0x7B => mov_a_r(self, self.regs.h),
            0x7C => mov_a_r(self, self.regs.l),
            0x7D => mov_a_m(self),
            0x7E => mov_a_r(self, self.regs.a),
            // 0x7F => (),
            // 0x80 => (),
            // 0x81 => (),
            // 0x82 => (),
            // 0x83 => (),
            // 0x84 => (),
            // 0x85 => (),
            // 0x86 => (),
            // 0x87 => (),
            // 0x88 => (),
            // 0x89 => (),
            // 0x8A => (),
            // 0x8B => (),
            // 0x8C => (),
            // 0x8D => (),
            // 0x8E => (),
            // 0x8F => (),
            // 0x90 => (),
            // 0x91 => (),
            // 0x92 => (),
            // 0x93 => (),
            // 0x94 => (),
            // 0x95 => (),
            // 0x96 => (),
            // 0x97 => (),
            // 0x98 => (),
            // 0x99 => (),
            // 0x9A => (),
            // 0x9B => (),
            // 0x9C => (),
            // 0x9D => (),
            // 0x9E => (),
            // 0x9F => (),
            // 0xA0 => (),
            // 0xA1 => (),
            // 0xA2 => (),
            // 0xA3 => (),
            // 0xA4 => (),
            // 0xA5 => (),
            // 0xA6 => (),
            // 0xA7 => (),
            // 0xA8 => (),
            // 0xA9 => (),
            // 0xAA => (),
            // 0xAB => (),
            // 0xAC => (),
            // 0xAD => (),
            // 0xAE => (),
            // 0xAF => (),
            // 0xB0 => (),
            // 0xB1 => (),
            // 0xB2 => (),
            // 0xB3 => (),
            // 0xB4 => (),
            // 0xB5 => (),
            // 0xB6 => (),
            // 0xB7 => (),
            // 0xB8 => (),
            // 0xB9 => (),
            // 0xBA => (),
            // 0xBB => (),
            // 0xBC => (),
            // 0xBD => (),
            // 0xBE => (),
            // 0xBF => (),
            // 0xC0 => (),
            // 0xC1 => (),
            // 0xC2 => (),
            // 0xC3 => (),
            // 0xC4 => (),
            // 0xC5 => (),
            // 0xC6 => (),
            // 0xC7 => (),
            // 0xC8 => (),
            // 0xC9 => (),
            // 0xCA => (),
            // 0xCB => (),
            // 0xCC => (),
            // 0xCD => (),
            // 0xCE => (),
            // 0xCF => (),
            // 0xD0 => (),
            // 0xD1 => (),
            // 0xD2 => (),
            // 0xD3 => (),
            // 0xD4 => (),
            // 0xD5 => (),
            // 0xD6 => (),
            // 0xD7 => (),
            // 0xD8 => (),
            // 0xD9 => (),
            // 0xDA => (),
            // 0xDB => (),
            // 0xDC => (),
            // 0xDD => (),
            // 0xDE => (),
            // 0xDF => (),
            // 0xE0 => (),
            // 0xE1 => (),
            // 0xE2 => (),
            // 0xE3 => (),
            // 0xE4 => (),
            // 0xE5 => (),
            // 0xE6 => (),
            // 0xE7 => (),
            // 0xE8 => (),
            // 0xE9 => (),
            // 0xEA => (),
            // 0xEB => (),
            // 0xEC => (),
            // 0xED => (),
            // 0xEE => (),
            // 0xEF => (),
            // 0xF0 => (),
            // 0xF1 => (),
            // 0xF2 => (),
            // 0xF3 => (),
            // 0xF4 => (),
            // 0xF5 => (),
            // 0xF6 => (),
            // 0xF7 => (),
            // 0xF8 => (),
            // 0xF9 => (),
            // 0xFA => (),
            // 0xFB => (),
            // 0xFC => (),
            // 0xFD => (),
            // 0xFE => (),
            // 0xFF => (),
            _ => {
                println!("Error: unknown opcode");
                0
            }
        }
    }
}
